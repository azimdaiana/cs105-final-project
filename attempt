import blessed
from utilities import (
    load_map, print_map, randomMaze, getCurrentLocation,
    setLocation, guard_found, generate_problem,
    loadSavedGame, savingGame
)

term = blessed.Terminal()

def selectMap():
    print(
        "Welcome to Medieval Math Mayhem, a text-based math adventure game!\n"
        "Please select your map: map1, map2, map3, map4, map5, or random.\n"
        "If you'd like to continue your previous game, type 'continue'."
    )
    s = input("Your choice: ").strip().lower()

    if s == "continue":
        try:
            loc, grid, progMap = loadSavedGame()
            player_x, player_y = loc
            print("Your last game has been uploaded!\n"
                  f"This is your maze:\n{progMap}\n"
                  f"Current location: ({player_x}, {player_y})\n")
            return grid, progMap, player_x, player_y
        except FileNotFoundError:
            print("No saved game found. Please choose a new map.")
            return selectMap()

    map_files = {
        "map1": "map1.txt",
        "map2": "map2.txt",
        "map3": "map3.txt",
        "map4": "map4.txt",
        "map5": "map5.txt"
    }

    if s in map_files:
        grid = load_map(map_files[s])
    elif s == 'random':
        try:
            r = int(input("How many rows will your grid have? "))
            c = int(input("How many columns will your grid have? "))
            grid = randomMaze(r, c)
        except ValueError:
            print("Invalid input for grid size.")
            return selectMap()
    else:
        print("Invalid input. Please try again.")
        return selectMap()

    progMap = print_map(grid)
    player_x, player_y = getCurrentLocation()

    print(f"\nMap loaded: {len(grid)} rows x {len(grid[0])} columns")
    print("You are trapped in a castle! Use directions (north/south/east/west) to escape.\n"
          "Beware of guards who may challenge you to a math battle.\n"
          f"Here is your maze:\n{progMap}\n"
          "You will start at the top-left corner.\n")
    
    return grid, progMap, player_x, player_y


def UI_run():
    global grid, player_x, player_y, progMap
    win = False

    directions = {
        "north": (0, -1),
        "south": (0, 1),
        "east": (1, 0),
        "west": (-1, 0)
    }

    while not win:
        action = input("\nWhat would you like to do? (move/save): ").strip().lower()

        if action == "move":
            direction = input("Which direction? (north/south/east/west): ").strip().lower()
            if direction in directions:
                dx, dy = directions[direction]
                x, y = getCurrentLocation()
                moved = setLocation(x + dx, y + dy, grid, progMap)
                player_x, player_y = getCurrentLocation()
                if moved:
                    progMap[player_y][player_x] = 7
                    if grid[player_y][player_x] == 3:
                        if guard_found():
                            continue
                        else:
                            print("You failed the guard challenge. Try again!")
                            return
                    elif grid[player_y][player_x] == 2:
                        print("Congratulations! You have escaped the castle.")
                        open('lastGameSaved.json', 'w').close()
                        win = True
                    else:
                        print(f"Current location: {getCurrentLocation()}")
                else:
                    print("You can't move there.")
            else:
                print("Invalid direction. Try again.")
        elif action == "save":
            savingGame(player_x, player_y, grid, progMap)
            print("Game saved.")
        else:
            print("Invalid input. Please try again.")


if __name__ == "__main__":
    grid, progMap, player_x, player_y = selectMap()
    UI_run()
    again = input("Would you like to play again? (yes/no): ").strip().lower()
    if again == "yes":
        grid, progMap, player_x, player_y = selectMap()
        UI_run()
